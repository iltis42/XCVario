
#
# Arduino-1.0 Makefile 
#
# written by olikraus@gmail.com
#
# Features:
#   - boards.txt is used to derive parameters
#   - All intermediate files are put into a separate directory (TMPDIRNAME)
#   - Simple use: Copy Makefile into the same directory of the .ino file
#
# Limitations:
#   - requires UNIX environment
#   - TMPDIRNAME must be subdirectory of the current directory.
#
# Targets
# 	all		build everything
#	upload	build and upload to arduino
#	clean	remove all temporary files (includes final hex file)
#
# History
#	001	28 Apr 2010	first  release
#	002  05 Oct 2010	added 'uno'
#	003  06 Dec 2011    arduino 1.0 
#	004  11 Feb 2012     u8glib   
#	005	24 Feb 2013	arduino 1.5.2 Due
#

#=== user configuration ===
# All ...PATH variables must have a '/' at the end

# Board (and prozessor) information: see $(ARDUINO_PATH)hardware/arduino/boards.txt
# Some examples:
#	BOARD		DESCRIPTION
#	arduino_due_x			Arduino Due
BOARD:=arduino_due_x


  
UCG_PATH:=$(shell cd ../../.. && pwd)/csrc/
UCG_CPP_PATH:=$(shell cd ../../.. && pwd)/cppsrc_sdspi/


# The location where the avr tools (e.g. avr-gcc) are located. Requires a '/' at the end.
# Can be empty if all tools are accessable through the search path
AVR_TOOLS_PATH:=/home/kraus/prg/arduino-1.5.2/hardware/tools/g++_arm_none_eabi/bin/

# Install path of the arduino software. Requires a '/' at the end.
ARDUINO_PATH:=/home/kraus/prg/arduino-1.5.2/

# Install path for bossac. Requires a '/' at the end. Can be empty if bossac is in the search path.
BOSSAC_PATH:=$(ARDUINO_PATH)hardware/tools/

# The unix device where we can reach the arduino board
# Due: /dev/ttyACM0
PORT:=/dev/ttyACM0

# List of all libaries which should be included.
EXTRA_DIRS=$(ARDUINO_PATH)hardware/arduino/sam/libraries/SPI/
#EXTRA_DIRS+=$(ARDUINO_PATH)libraries/.../

#=== fetch parameter from boards.txt processor parameter ===
# the basic idea is to get most of the information from boards.txt

SAM_DIR:=$(ARDUINO_PATH)hardware/arduino/sam/
BOARDS_TXT:=$(SAM_DIR)boards.txt

# get the MCU value from the $(BOARD).build.mcu variable. For the atmega328 board this is atmega328p
MCU:=$(shell sed -n -e "s/$(BOARD).build.mcu=\(.*\)/\1/p" $(BOARDS_TXT))
# get the F_CPU value from the $(BOARD).build.f_cpu variable. For the atmega328 board this is 16000000
F_CPU:=$(shell sed -n -e "s/$(BOARD).build.f_cpu=\(.*\)/\1/p" $(BOARDS_TXT))
# get variant subfolder
VARIANT:=$(shell sed -n -e "s/$(BOARD).build.variant=\(.*\)/\1/p" $(BOARDS_TXT))
LDSCRIPT:=$(SAM_DIR)variants/$(VARIANT)/$(shell sed -n -e "s/$(BOARD).build.ldscript=\(.*\)/\1/p" $(BOARDS_TXT))
SYSLIB:=$(SAM_DIR)variants/$(VARIANT)/$(shell sed -n -e "s/$(BOARD).build.variant_system_lib=\(.*\)/\1/p" $(BOARDS_TXT))


#=== identify user files ===
PDESRC:=$(shell ls *.ino)
TARGETNAME=$(basename $(PDESRC))

CDIRS:=$(EXTRA_DIRS) $(addsuffix utility/,$(EXTRA_DIRS))
CDIRS:=*.c utility/*.c $(UCG_PATH)*.c $(addsuffix *.c,$(CDIRS)) $(ARDUINO_PATH)hardware/arduino/sam/cores/arduino/*.c
CSRC:=$(shell ls $(CDIRS) 2>/dev/null)

CCSRC:=$(shell ls *.cc 2>/dev/null)

CPPDIRS:=$(EXTRA_DIRS) $(addsuffix utility/,$(EXTRA_DIRS))
CPPDIRS:=*.cpp utility/*.cpp $(addsuffix *.cpp,$(CPPDIRS)) $(UCG_CPP_PATH)/*.cpp $(ARDUINO_PATH)hardware/arduino/sam/cores/arduino/*.cpp $(ARDUINO_PATH)hardware/arduino/sam/variants/$(VARIANT)/*.cpp
CPPSRC:=$(shell ls $(CPPDIRS) 2>/dev/null)

#=== build internal variables ===

# the name of the subdirectory where everything is stored
TMPDIRNAME:=tmp
TMPDIRPATH:=$(TMPDIRNAME)/

AVRTOOLSPATH:=$(AVR_TOOLS_PATH)

OBJCOPY:=$(AVRTOOLSPATH)arm-none-eabi-objcopy
OBJDUMP:=$(AVRTOOLSPATH)arm-none-eabi-objdump
SIZE:=$(AVRTOOLSPATH)arm-none-eabi-size

CPPSRC:=$(addprefix $(TMPDIRPATH),$(PDESRC:.ino=.cpp)) $(CPPSRC)

COBJ:=$(CSRC:.c=.o)
CCOBJ:=$(CCSRC:.cc=.o)
CPPOBJ:=$(CPPSRC:.cpp=.o)

OBJFILES:=$(COBJ) $(CCOBJ) $(CPPOBJ)
DIRS:= $(dir $(OBJFILES))

DEPFILES:=$(OBJFILES:.o=.d)
# assembler files from arm-none-eabi-gcc -S
ASSFILES:=$(OBJFILES:.o=.s)
# disassembled object files with arm-none-eabi-objdump -S
DISFILES:=$(OBJFILES:.o=.dis)


LIBNAME:=$(TMPDIRPATH)$(TARGETNAME).a
ELFNAME:=$(TMPDIRPATH)$(TARGETNAME).elf
HEXNAME:=$(TMPDIRPATH)$(TARGETNAME).hex

# bossac --port=ttyACM0 -U false -e -w -v -b /tmp/build3125761901550223244.tmp/Blink.cpp.bin -R


#BOSSAC_FLAGS = --port=$(PORT) -U false -e -w -v -b $(HEXNAME) -R
# --port does not work
BOSSAC_FLAGS = -U false -e -w -v -b $(HEXNAME) -R

BOSSAC = $(BOSSAC_PATH)bossac

#=== predefined variable override ===
# use "make -p -f/dev/null" to see the default rules and definitions


# Build C and C++ flags. Include path information must be placed here
COMMON_FLAGS = -DF_CPU=$(F_CPU) -mcpu=$(MCU) $(DEFS) -DARDUINO=152
COMMON_FLAGS += -D__SAM3X8E__ -mthumb -DUSB_PID=0x03e -DUSB_VID=0x2341
#COMMON_FLAGS += -DUSBCON
COMMON_FLAGS += -Os -w -ffunction-sections -fdata-sections -Wl,--gc-sections 
#COMMON_FLAGS += -nostdlib 
COMMON_FLAGS += --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -Dprintf=iprintf 
#COMMON_FLAGS += -Wall -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
COMMON_FLAGS += -Wall -funsigned-char -funsigned-bitfields
COMMON_FLAGS += -I. 
COMMON_FLAGS += -I$(ARDUINO_PATH)hardware/arduino/sam/system/libsam
COMMON_FLAGS += -I$(ARDUINO_PATH)hardware/arduino/sam/system/CMSIS/CMSIS/Include/
COMMON_FLAGS += -I$(ARDUINO_PATH)hardware/arduino/sam/system/CMSIS/Device/ATMEL/
COMMON_FLAGS += -I$(ARDUINO_PATH)hardware/arduino/sam/cores/arduino
COMMON_FLAGS += -I$(ARDUINO_PATH)hardware/arduino/sam/variants/$(VARIANT)
COMMON_FLAGS += -I. -I$(UCG_PATH) -I$(UCG_CPP_PATH)
COMMON_FLAGS += $(addprefix -I,$(EXTRA_DIRS))
#COMMON_FLAGS += 
#COMMON_FLAGS += -Wl,--relax

CFLAGS = $(COMMON_FLAGS) -std=gnu99 -Wstrict-prototypes  
CXXFLAGS = $(COMMON_FLAGS) 

SAMLDFLAGS =  -T $(LDSCRIPT) -Wl,--Map=output.map
SAMLDFLAGS +=  -lm -lgcc -mthumb -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all 
SAMLDFLAGS +=-Wl,--warn-common -Wl,--warn-section-align -Wl,--warn-unresolved-symbols 

# Replace standard build tools by avr tools
CC = $(AVRTOOLSPATH)arm-none-eabi-gcc
CXX = $(AVRTOOLSPATH)arm-none-eabi-g++
AR  = @$(AVRTOOLSPATH)arm-none-eabi-ar


# "rm" must be able to delete a directory tree
RM = rm -rf 

#=== rules ===

# add rules for the C/C++ files where the .o file is placed in the TMPDIRPATH
# reuse existing variables as far as possible

$(TMPDIRPATH)%.o: %.c
	@echo compile $<
	@$(COMPILE.c) $(OUTPUT_OPTION) $<

$(TMPDIRPATH)%.o: %.cc
	@echo compile $< 
	@$(COMPILE.cc) $(OUTPUT_OPTION) $<

$(TMPDIRPATH)%.o: %.cpp
	@echo compile $<
	@$(COMPILE.cpp) $(OUTPUT_OPTION) $<

$(TMPDIRPATH)%.s: %.c
	@$(COMPILE.c) $(OUTPUT_OPTION) -S $<

$(TMPDIRPATH)%.s: %.cc
	@$(COMPILE.cc) $(OUTPUT_OPTION) -S $<

$(TMPDIRPATH)%.s: %.cpp
	@$(COMPILE.cpp) $(OUTPUT_OPTION) -S $<

$(TMPDIRPATH)%.dis: $(TMPDIRPATH)%.o
	@$(OBJDUMP) -S $< > $@

.SUFFIXES: .elf .hex .ino

.elf.hex:
	@$(OBJCOPY) -O binary $< $@
	
$(TMPDIRPATH)%.cpp: %.ino
	@cat $(ARDUINO_PATH)hardware/arduino/sam/cores/arduino/main.cpp > $@
	@cat $< >> $@
	@echo >> $@
	@echo 'extern "C" void __cxa_pure_virtual() { while (1); }' >> $@


.PHONY: all
all: tmpdir $(HEXNAME) assemblersource showsize
	ls -al $(HEXNAME) $(ELFNAME)

$(ELFNAME): $(LIBNAME)($(addprefix $(TMPDIRPATH),$(OBJFILES))) 
	$(LINK.o) $(COMMON_FLAGS) $(SAMLDFLAGS) -Wl,--start-group $(LIBNAME) $(LOADLIBES) $(LDLIBS) $(SYSLIB) -Wl,--end-group -o $@

$(LIBNAME)(): $(addprefix $(TMPDIRPATH),$(OBJFILES))

#=== create temp directory ===
# not really required, because it will be also created during the dependency handling
.PHONY: tmpdir
tmpdir:
	@test -d $(TMPDIRPATH) || mkdir $(TMPDIRPATH)

#=== create assembler files for each C/C++ file ===
.PHONY: assemblersource
assemblersource: $(addprefix $(TMPDIRPATH),$(ASSFILES)) $(addprefix $(TMPDIRPATH),$(DISFILES))


#=== show the section sizes of the ELF file ===
.PHONY: showsize
showsize: $(ELFNAME)
	$(SIZE) $<

#=== clean up target ===
# this is simple: the TMPDIRPATH is removed
.PHONY: clean
clean:
	$(RM) $(TMPDIRPATH)

# Program the device.  
# step 1: reset the arduino board with the stty command
# step 2: use bossac to upload the software
.PHONY: upload
upload: $(HEXNAME)
	stty -F $(PORT) cs8 1200 hupcl
	$(BOSSAC) $(BOSSAC_FLAGS)


# === dependency handling ===
# From the gnu make manual (section 4.14, Generating Prerequisites Automatically)
# Additionally (because this will be the first executed rule) TMPDIRPATH is created here.
# Instead of "sed" the "echo" command is used
# cd $(TMPDIRPATH); mkdir -p $(DIRS) 2> /dev/null; cd ..
DEPACTION=test -d $(TMPDIRPATH) || mkdir $(TMPDIRPATH);\
mkdir -p $(addprefix $(TMPDIRPATH),$(DIRS));\
set -e; echo -n $@ $(dir $@) > $@; $(CC) -MM $(COMMON_FLAGS) $< >> $@


$(TMPDIRPATH)%.d: %.c
	@$(DEPACTION)

$(TMPDIRPATH)%.d: %.cc
	@$(DEPACTION)

$(TMPDIRPATH)%.d: %.cpp
	@$(DEPACTION)

# Include dependency files. If a .d file is missing, a warning is created and the .d file is created
# This warning is not a problem (gnu make manual, section 3.3 Including Other Makefiles)
-include $(addprefix $(TMPDIRPATH),$(DEPFILES))


