/***********************************************************
 ***   THIS DOCUMENT CONTAINS PROPRIETARY INFORMATION.   ***
 ***    IT IS THE EXCLUSIVE CONFIDENTIAL PROPERTY OF     ***
 ***     Rohs Engineering Design AND ITS AFFILIATES.     ***
 ***                                                     ***
 ***       Copyright (C) Rohs Engineering Design         ***
 ***********************************************************/

#include "BootUpScreen.h"

#include "DrawDisplay.h"
#include "UiEvents.h"
#include "protocol/Clock.h"
#include "AdaptUGC.h"
#include "sensor.h"

#include <esp_random.h>

#include <cinttypes>
#include <ctime>

BootUpScreen *BootUpScreen::inst = nullptr;

#define LOGO_WIDTH 216
#define LOGO_HEIGHT 191

const uint8_t logo_bitmap_rle[] = {
    // 'XC Vario', 216x191px
    0x39, 0x85, 0x7F, 0x52, 0x88, 0x7F, 0x4F, 0x8A, 0x66, 0x82, 0x64, 0x8B, 0x66, 0x83, 0x62, 0x8C,
    0x66, 0x84, 0x5D, 0x81, 0x02, 0x8D, 0x66, 0x85, 0x5C, 0x90, 0x65, 0x87, 0x5B, 0x8F, 0x66, 0x88,
    0x59, 0x90, 0x66, 0x88, 0x58, 0x90, 0x66, 0x89, 0x57, 0x90, 0x67, 0x89, 0x56, 0x92, 0x66, 0x8A,
    0x55, 0x93, 0x64, 0x8B, 0x56, 0x93, 0x63, 0x8B, 0x58, 0x86, 0x01, 0x8B, 0x61, 0x8C, 0x60, 0x8B,
    0x60, 0x8C, 0x61, 0x8B, 0x5F, 0x8D, 0x61, 0x8B, 0x5D, 0x8E, 0x61, 0x8C, 0x5C, 0x8E, 0x62, 0x8D,
    0x5A, 0x8E, 0x63, 0x8D, 0x58, 0x8F, 0x64, 0x8D, 0x57, 0x8F, 0x65, 0x8D, 0x56, 0x8F, 0x66, 0x8D,
    0x54, 0x90, 0x69, 0x8B, 0x53, 0x90, 0x6B, 0x8A, 0x51, 0x91, 0x6E, 0x88, 0x50, 0x91, 0x70, 0x87,
    0x4F, 0x90, 0x73, 0x87, 0x4C, 0x91, 0x76, 0x85, 0x4B, 0x91, 0x28, 0x87, 0x49, 0x86, 0x47, 0x92,
    0x23, 0x92, 0x46, 0x86, 0x44, 0x91, 0x22, 0x98, 0x44, 0x87, 0x40, 0x92, 0x21, 0x9C, 0x43, 0x88,
    0x3D, 0x92, 0x20, 0xA0, 0x43, 0x87, 0x3A, 0x93, 0x1F, 0xA3, 0x43, 0x88, 0x37, 0x93, 0x1F, 0xA5,
    0x44, 0x88, 0x34, 0x92, 0x20, 0xA7, 0x44, 0x89, 0x30, 0x93, 0x20, 0x8F, 0x0B, 0x8F, 0x45, 0x88,
    0x2E, 0x93, 0x20, 0x8D, 0x11, 0x8D, 0x45, 0x89, 0x2A, 0x94, 0x20, 0x8C, 0x15, 0x8C, 0x45, 0x8A,
    0x27, 0x93, 0x21, 0x8B, 0x19, 0x8A, 0x47, 0x89, 0x24, 0x94, 0x21, 0x8B, 0x1B, 0x8A, 0x47, 0x8A,
    0x21, 0x94, 0x22, 0x8A, 0x1D, 0x8A, 0x48, 0x8A, 0x1D, 0x95, 0x22, 0x8A, 0x1E, 0x8A, 0x49, 0x8B,
    0x1A, 0x94, 0x24, 0x89, 0x20, 0x8A, 0x4A, 0x8B, 0x16, 0x95, 0x24, 0x89, 0x22, 0x89, 0x4B, 0x8C,
    0x13, 0x95, 0x25, 0x89, 0x22, 0x8A, 0x4B, 0x8D, 0x0F, 0x95, 0x26, 0x89, 0x23, 0x8A, 0x4D, 0x8E,
    0x0A, 0x96, 0x27, 0x89, 0x24, 0x88, 0x4F, 0x8F, 0x07, 0x96, 0x27, 0x89, 0x25, 0x83, 0x55, 0x90,
    0x04, 0x95, 0x29, 0x89, 0x7F, 0xA6, 0x2A, 0x89, 0x7F, 0x01, 0xA4, 0x2A, 0x8A, 0x7F, 0x02, 0xA1,
    0x2C, 0x89, 0x7F, 0x04, 0x9F, 0x2D, 0x89, 0x7F, 0x06, 0x9C, 0x2E, 0x89, 0x7F, 0x07, 0x99, 0x30,
    0x89, 0x7F, 0x08, 0x97, 0x31, 0x89, 0x7F, 0x06, 0x9A, 0x2F, 0x8A, 0x7F, 0x05, 0x9C, 0x2E, 0x89,
    0x7F, 0x04, 0x9F, 0x2D, 0x89, 0x7F, 0x03, 0xA1, 0x2C, 0x89, 0x7F, 0x01, 0xA4, 0x2B, 0x89, 0x7F,
    0xA7, 0x29, 0x89, 0x7D, 0xAA, 0x28, 0x89, 0x7B, 0xAD, 0x27, 0x89, 0x7A, 0x97, 0x01, 0x97, 0x26,
    0x89, 0x78, 0x98, 0x04, 0x96, 0x26, 0x89, 0x75, 0x98, 0x07, 0x96, 0x25, 0x89, 0x74, 0x97, 0x0B,
    0x95, 0x24, 0x89, 0x72, 0x98, 0x0D, 0x95, 0x23, 0x89, 0x71, 0x97, 0x10, 0x94, 0x23, 0x89, 0x6F,
    0x97, 0x14, 0x93, 0x22, 0x89, 0x6D, 0x98, 0x16, 0x93, 0x22, 0x89, 0x26, 0x84, 0x41, 0x97, 0x19,
    0x93, 0x21, 0x89, 0x26, 0x88, 0x3B, 0x98, 0x1C, 0x91, 0x21, 0x89, 0x26, 0x89, 0x38, 0x98, 0x1F,
    0x91, 0x21, 0x89, 0x24, 0x8A, 0x36, 0x99, 0x22, 0x90, 0x20, 0x89, 0x24, 0x89, 0x36, 0x98, 0x26,
    0x8F, 0x20, 0x89, 0x23, 0x89, 0x34, 0x98, 0x2A, 0x8D, 0x20, 0x89, 0x22, 0x8A, 0x33, 0x97, 0x2E,
    0x8C, 0x1F, 0x8A, 0x20, 0x8A, 0x32, 0x98, 0x31, 0x8B, 0x1F, 0x89, 0x20, 0x8A, 0x31, 0x97, 0x36,
    0x88, 0x1F, 0x8A, 0x1E, 0x8A, 0x30, 0x97, 0x3B, 0x85, 0x20, 0x8A, 0x1C, 0x8B, 0x2E, 0x98, 0x61,
    0x8B, 0x1A, 0x8B, 0x2E, 0x97, 0x64, 0x8B, 0x18, 0x8B, 0x2D, 0x97, 0x67, 0x8C, 0x14, 0x8D, 0x2B,
    0x98, 0x69, 0x8D, 0x11, 0x8D, 0x2B, 0x97, 0x6C, 0x8F, 0x0B, 0x8F, 0x2A, 0x97, 0x6F, 0xA7, 0x2A,
    0x97, 0x71, 0xA5, 0x29, 0x97, 0x74, 0xA3, 0x28, 0x97, 0x77, 0xA0, 0x29, 0x96, 0x7B, 0x9D, 0x28,
    0x97, 0x7E, 0x99, 0x28, 0x97, 0x7F, 0x04, 0x93, 0x2A, 0x96, 0x7F, 0x0B, 0x89, 0x2D, 0x97, 0x7F,
    0x40, 0x97, 0x7F, 0x41, 0x96, 0x7F, 0x41, 0x96, 0x7F, 0x41, 0x96, 0x7F, 0x42, 0x95, 0x7F, 0x42,
    0x95, 0x7F, 0x42, 0x95, 0x7F, 0x42, 0x94, 0x7F, 0x43, 0x94, 0x7F, 0x44, 0x92, 0x7F, 0x44, 0x93,
    0x7F, 0x44, 0x92, 0x7F, 0x47, 0x8F, 0x7F, 0x4A, 0x8C, 0x7F, 0x4E, 0x89, 0x7F, 0x51, 0x84, 0x7F,
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
    0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x59, 0x89, 0x25,
    0x88, 0x49, 0x87, 0x53, 0x88, 0x25, 0x88, 0x49, 0x87, 0x53, 0x89, 0x23, 0x88, 0x4A, 0x87, 0x54,
    0x88, 0x23, 0x88, 0x4A, 0x87, 0x54, 0x88, 0x22, 0x88, 0x4B, 0x87, 0x54, 0x89, 0x21, 0x88, 0x4B,
    0x87, 0x55, 0x88, 0x21, 0x88, 0x4B, 0x87, 0x55, 0x88, 0x20, 0x88, 0x4C, 0x87, 0x55, 0x89, 0x1F,
    0x88, 0x4C, 0x87, 0x56, 0x88, 0x1F, 0x87, 0x7F, 0x2B, 0x88, 0x1E, 0x88, 0x7F, 0x2C, 0x88, 0x1D,
    0x88, 0x7F, 0x2C, 0x88, 0x1C, 0x88, 0x7F, 0x2D, 0x88, 0x1C, 0x88, 0x7F, 0x2E, 0x88, 0x1B, 0x88,
    0x7F, 0x2E, 0x88, 0x1A, 0x88, 0x7F, 0x30, 0x88, 0x19, 0x88, 0x10, 0x90, 0x14, 0x85, 0x06, 0x89,
    0x08, 0x86, 0x16, 0x8D, 0x36, 0x88, 0x19, 0x87, 0x0E, 0x96, 0x10, 0x87, 0x04, 0x8C, 0x05, 0x87,
    0x13, 0x92, 0x35, 0x87, 0x18, 0x88, 0x0C, 0x99, 0x0F, 0x87, 0x03, 0x8D, 0x05, 0x87, 0x11, 0x96,
    0x33, 0x88, 0x17, 0x88, 0x0B, 0x9C, 0x0D, 0x87, 0x02, 0x8E, 0x05, 0x87, 0x10, 0x98, 0x32, 0x88,
    0x16, 0x88, 0x0B, 0x9D, 0x0D, 0x87, 0x01, 0x8F, 0x05, 0x87, 0x0F, 0x9B, 0x31, 0x87, 0x16, 0x88,
    0x0A, 0x9F, 0x0C, 0x87, 0x01, 0x8E, 0x06, 0x87, 0x0E, 0x9D, 0x30, 0x88, 0x15, 0x88, 0x09, 0x8B,
    0x0A, 0x8B, 0x0C, 0x96, 0x06, 0x87, 0x0D, 0x8B, 0x08, 0x8C, 0x2F, 0x88, 0x14, 0x88, 0x0A, 0x88,
    0x10, 0x89, 0x0B, 0x8E, 0x04, 0x83, 0x07, 0x87, 0x0C, 0x8A, 0x0C, 0x8A, 0x30, 0x87, 0x14, 0x88,
    0x09, 0x89, 0x10, 0x89, 0x0B, 0x8C, 0x10, 0x87, 0x0B, 0x89, 0x10, 0x89, 0x2F, 0x88, 0x13, 0x87,
    0x0A, 0x88, 0x12, 0x88, 0x0B, 0x8B, 0x11, 0x87, 0x0B, 0x88, 0x12, 0x89, 0x2F, 0x87, 0x12, 0x88,
    0x09, 0x88, 0x14, 0x87, 0x0B, 0x8A, 0x12, 0x87, 0x0A, 0x89, 0x13, 0x88, 0x2F, 0x87, 0x12, 0x88,
    0x09, 0x88, 0x14, 0x87, 0x0B, 0x89, 0x13, 0x87, 0x0A, 0x88, 0x14, 0x89, 0x2E, 0x88, 0x11, 0x87,
    0x0A, 0x87, 0x15, 0x87, 0x0B, 0x89, 0x13, 0x87, 0x0A, 0x87, 0x16, 0x88, 0x2F, 0x87, 0x10, 0x88,
    0x0F, 0x82, 0x15, 0x87, 0x0B, 0x89, 0x13, 0x87, 0x09, 0x88, 0x16, 0x88, 0x2F, 0x88, 0x0F, 0x87,
    0x27, 0x87, 0x0B, 0x88, 0x14, 0x87, 0x09, 0x88, 0x17, 0x87, 0x30, 0x87, 0x0F, 0x87, 0x27, 0x87,
    0x0B, 0x88, 0x14, 0x87, 0x09, 0x87, 0x18, 0x88, 0x2F, 0x88, 0x0D, 0x88, 0x26, 0x88, 0x0B, 0x88,
    0x14, 0x87, 0x08, 0x88, 0x18, 0x88, 0x2F, 0x88, 0x0D, 0x87, 0x22, 0x8D, 0x0B, 0x88, 0x14, 0x87,
    0x08, 0x88, 0x18, 0x88, 0x30, 0x87, 0x0C, 0x88, 0x1B, 0x94, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88,
    0x18, 0x88, 0x30, 0x88, 0x0B, 0x87, 0x16, 0x9A, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88, 0x19, 0x87,
    0x30, 0x88, 0x0B, 0x87, 0x13, 0x9D, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88, 0x19, 0x87, 0x31, 0x87,
    0x0A, 0x88, 0x11, 0x9F, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88, 0x19, 0x87, 0x31, 0x88, 0x09, 0x87,
    0x11, 0x97, 0x02, 0x87, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88, 0x19, 0x87, 0x31, 0x88, 0x09, 0x87,
    0x10, 0x95, 0x05, 0x87, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88, 0x19, 0x87, 0x32, 0x87, 0x08, 0x87,
    0x10, 0x90, 0x0B, 0x87, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88, 0x18, 0x88, 0x32, 0x88, 0x07, 0x87,
    0x0F, 0x8C, 0x10, 0x87, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88, 0x18, 0x88, 0x33, 0x87, 0x06, 0x87,
    0x10, 0x89, 0x13, 0x87, 0x0B, 0x88, 0x14, 0x87, 0x08, 0x88, 0x18, 0x88, 0x33, 0x87, 0x06, 0x87,
    0x0F, 0x89, 0x14, 0x87, 0x0B, 0x88, 0x14, 0x87, 0x09, 0x87, 0x18, 0x88, 0x33, 0x88, 0x05, 0x87,
    0x0F, 0x88, 0x15, 0x88, 0x0A, 0x88, 0x14, 0x87, 0x09, 0x87, 0x18, 0x88, 0x34, 0x87, 0x04, 0x87,
    0x10, 0x88, 0x15, 0x88, 0x0A, 0x88, 0x14, 0x87, 0x09, 0x88, 0x17, 0x87, 0x35, 0x87, 0x04, 0x87,
    0x10, 0x88, 0x14, 0x89, 0x0A, 0x88, 0x14, 0x87, 0x0A, 0x87, 0x16, 0x88, 0x36, 0x87, 0x03, 0x87,
    0x10, 0x87, 0x15, 0x89, 0x0A, 0x88, 0x14, 0x87, 0x0A, 0x87, 0x16, 0x88, 0x36, 0x87, 0x02, 0x87,
    0x11, 0x88, 0x13, 0x8A, 0x0A, 0x88, 0x14, 0x87, 0x0A, 0x88, 0x14, 0x88, 0x37, 0x87, 0x02, 0x87,
    0x11, 0x88, 0x13, 0x8A, 0x0A, 0x88, 0x14, 0x87, 0x0B, 0x88, 0x12, 0x89, 0x38, 0x87, 0x01, 0x86,
    0x12, 0x88, 0x12, 0x8B, 0x0A, 0x88, 0x14, 0x87, 0x0B, 0x89, 0x11, 0x88, 0x39, 0x87, 0x01, 0x86,
    0x12, 0x89, 0x10, 0x8C, 0x0A, 0x88, 0x14, 0x87, 0x0C, 0x89, 0x0E, 0x8A, 0x39, 0x8E, 0x13, 0x89,
    0x0D, 0x8E, 0x0A, 0x88, 0x14, 0x87, 0x0D, 0x8A, 0x0B, 0x8A, 0x3B, 0x8C, 0x14, 0x8B, 0x09, 0x90,
    0x0A, 0x88, 0x14, 0x87, 0x0D, 0x8C, 0x07, 0x8B, 0x3C, 0x8C, 0x15, 0x9B, 0x01, 0x87, 0x0A, 0x88,
    0x14, 0x87, 0x0E, 0x9C, 0x3E, 0x8A, 0x16, 0x9A, 0x02, 0x87, 0x0A, 0x88, 0x14, 0x87, 0x0F, 0x9A,
    0x3F, 0x8A, 0x18, 0x96, 0x04, 0x88, 0x09, 0x88, 0x14, 0x87, 0x10, 0x98, 0x40, 0x8A, 0x19, 0x94,
    0x05, 0x88, 0x09, 0x88, 0x14, 0x87, 0x12, 0x94, 0x43, 0x88, 0x1B, 0x90, 0x09, 0x87, 0x09, 0x88,
    0x14, 0x87, 0x14, 0x90, 0x6B, 0x8A, 0x56, 0x8A, 0x20,
};


void decode_rle_bits(const uint8_t* rle_data, int rle_size, uint8_t* out_bits, int max_out_bits)
{
    size_t bit_pos = 0;

    for (int i = 0; i < rle_size; ++i) {
        uint8_t byte = rle_data[i];
        uint8_t bit = (byte >> 7) & 1;
        uint8_t count = byte & 0x7F;

        for (uint8_t j = 0; j < count; ++j) {
            if (bit_pos >= max_out_bits) return;
            int byte_idx = bit_pos / 8;
            int bit_idx  = 7 - (bit_pos % 8);
            if (bit) {
                out_bits[byte_idx] |= (1 << bit_idx);
            }
            bit_pos++;
        }
    }
}


constexpr const int MAX_PIXELS_PER_FRAME = 12;

BootUpScreen::BootUpScreen() :
    Clock_I(1)
{
    int width = MYUCG->getDisplayWidth()/2;
    int height = MYUCG->getDisplayHeight()/2;
    int radius = (width<height) ? width : height;

    // draw a blue disc
    MYUCG->setColor(COLOR_BLUE);
    MYUCG->drawDisc(width, height, radius-30, EGLIB_DRAW_ALL);

    // offset to pic
    x_offset = width-LOGO_WIDTH/2;
    y_offset = height-LOGO_HEIGHT/2;
    yline = LOGO_HEIGHT-1;
    yline_to = LOGO_HEIGHT*3/4;
    fini_part = 0;
    srand(time(NULL)); // seed for randomness
    MYUCG->setColor(COLOR_WHITE);

    // allocate bitmap and decode the rle compressed logo
    logo_bitmap = (uint8_t*)calloc(LOGO_HEIGHT * LOGO_WIDTH/8, 1);
    decode_rle_bits(logo_bitmap_rle, sizeof(logo_bitmap_rle), logo_bitmap, LOGO_HEIGHT * LOGO_WIDTH);

    Clock::start(this);
}

BootUpScreen *BootUpScreen::create()
{
    if ( ! inst ) {
        inst = new BootUpScreen();
    }
    return inst;
}

void BootUpScreen::terminate()
{
    xSemaphoreTake(display_mutex,portMAX_DELAY);
    if ( inst ) {
        delete inst;
        inst = nullptr;
    }
    xSemaphoreGive(display_mutex);
}

BootUpScreen::~BootUpScreen()
{
    Clock::stop(this);
    free(logo_bitmap);
}

// call 1, 1, 2, ..  (DIVIDER-1) for the parts that got positivly finished
// otherwise skip a part
void BootUpScreen::finish(int part)
{
    if ( fini_part < part-1 ) {
        yline = LOGO_HEIGHT*(DIVIDER-part)/4;
    }
    yline_to = std::max(0, LOGO_HEIGHT*(DIVIDER-part-1)/2);
    fini_part = part;
}

void BootUpScreen::draw()
{
    xSemaphoreTake(display_mutex,portMAX_DELAY);
    if ( inst ) {
        inst->animate();
    }
    xSemaphoreGive(display_mutex);
}

void BootUpScreen::animate()
{
    MYUCG->setColor(COLOR_WHITE);
    if ( ! fini_part ) {
        for (int i = 0; i < MAX_PIXELS_PER_FRAME; ) {
            int x = rand() % LOGO_WIDTH;
            int y = rand() % LOGO_HEIGHT;

            int byte = logo_bitmap[y*LOGO_WIDTH/8 + x/8];
            int bit = 7 - (x % 8);
            if ((byte >> bit) & 1) {
                MYUCG->drawPixel(x + x_offset, y + y_offset); // adjust position
                i++;
            }
        }
    } else {
        for (int y = yline; y >= std::max(yline_to, yline-MAX_PIXELS_PER_FRAME); y--) {
            for (int xi = 0; xi < LOGO_WIDTH; xi+=8) {
                int byte = logo_bitmap[y*LOGO_WIDTH/8 + xi/8];
                if ( byte == 0 ) { continue; }

                int bit = 0x80;
                int bitcount = 0;
                while (bitcount < 8) { // && xi+bitcount < LOGO_WIDTH (for all LOGO_WIDTH%8 != 0)
                    if (byte & bit) {
                        MYUCG->drawPixel(xi + bitcount + x_offset, y + y_offset);
                    }
                    bitcount++;
                    bit >>=1;
                }
            }
            yline--;
        }
    }
}


bool BootUpScreen::tick()
{
    int evt = ScreenEvent(ScreenEvent::BOOT_SCREEN).raw;
    xQueueSend(uiEventQueue, &evt, 0);
    return false;
}
